import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';
import {takeUntil} from 'rxjs/operators';
import {Router} from '@angular/router';
import {MatDialog} from '@angular/material/dialog';
import {SpinnerService} from '../../../services/spinner.service';
import {CommonService} from '../../../services/common.service';
import {ErrorDisplayService} from '../../../services/error-service.service';
import {Subject} from 'rxjs';
import {FormControl, FormGroup} from '@angular/forms';
import {CryptoService} from 'src/app/helpers/crypto.service';
import {CookieService} from 'ngx-cookie-service';
import {AppConstants} from 'src/app/helpers/AppConstants';
import {DatePipe} from '@angular/common';
import {element} from 'protractor';
import {FileUploadComponent} from '../../../general/file-upload/file-upload.component';

@Component({
  selector: 'app-capex-budget-submit-form',
  templateUrl: './capex-budget-submit-form.component.html',
  styleUrls: ['./capex-budget-submit-form.component.css'],
  providers: [DatePipe]
})
export class CapexBudgetSubmitFormComponent implements OnInit {
  @ViewChild('approveWarning', {static: true}) approveWarning!: TemplateRef<any>;
  @ViewChild('Details', {static: true}) Details!: TemplateRef<any>;
  department = this.cryptoService.decryptData(this.cookie.get(AppConstants.DEPARTMENT));

  private ngUnsubscribe = new Subject();
  contigious = false;
  budgetCd = '0000';
  budgetDesc = '';
  budgetAmount = 0;
  budgtAmd = 0;
  dataList!: BudgetId[];
  selectedList: Select[] = [];
  amountselect: any[] = [];
  plants: any[] = [];
  filterdepartments: any[] = [];
  filterinvest: any[] = [];
  investments: any[] = [];
  datalistfiltr: any[] = [];
  submit = 0;
  sumOfBudget = 0;
  summ = 0;
  approvalId: any;
  RequestDetail: any;
  role: any;
  mydate = new Date();
  rowData = [];
  payback = false;
  selectedStatus = false;
  selectortype: any = '0';
  payloadfile = [];
  typeofcapex: any[] = [];
  stored: any[] = [];
  investment: any;
  plantId?: number;
  check: any;
  availamountcheck: any;
  budgetcd: any;
  budgetCod: any;
  randomselect: boolean = false;
  budgetForm: FormGroup = new FormGroup({
    budgetSelect: new FormControl(),
    investmentSelect: new FormControl(),
    plantSelect: new FormControl(),
    budgetAmount: new FormControl(),
    budgetDesc: new FormControl(),
    // budgetcd: new FormControl({value: this.budgetCd, disabled: true}),
    // budgettype: new FormControl(),
  });
  budgetcode = new FormGroup({
    budgetcd: new FormControl({value: this.budgetCd, disabled: true}),
  })
  Contiguousgrp = new FormGroup({
    payback: new FormControl({value: false}),
    file: new FormControl()

  });
  retMsg = '';
  selectedIndex: any;
  values: any[] = [];
  selectedidamount: any[] = [];
  localsaved: any[] = [];


  constructor(private route: Router,
              private dialog: MatDialog,
              private errorService: ErrorDisplayService,
              private spinnerService: SpinnerService,
              private commonService: CommonService,
              private cryptoService: CryptoService,
              private cookie: CookieService,
              private datePipe: DatePipe) {

  }

  typeofone: any[] = [
    {
      id: '1',
      type: 'Budgeted'
    },
    {
      id: '2',
      type: 'Non-budgeted'
    },
    {
      id: '3',
      type: 'Partial'
    },
    {
      id: '4',
      type: 'Cross Utilisation'
    },
  ];
  typeoftwo: any[] = [
    {
      id: '1',
      type: 'Budgeted'
    },
    {
      id: '2',
      type: 'Non-budgeted'
    },
    {
      id: '4',
      type: 'Cross Utilisation'
    },
  ];
  colDef5 = function () {
    return '<img src="assets/delete.png" height="32" width="34" style=" margin-top: 5px; margin-left: 15px"/>';
  };
  columnDefs = [
    {field: 'index', headerName: 'SL.No', width: 100},
    {field: 'docName', headerName: 'Document Name', filter: true, width: 150},
    {field: 'delete', headerName: 'Delete', filter: true, width: 130, cellRenderer: this.colDef5}
  ];
  columnDefspay = [
    {field: 'index', headerName: 'SL.No', width: 100},
    {field: 'docName', headerName: 'Document Name', filter: true, width: 150},
    {field: 'delete', headerName: 'Delete', filter: true, width: 130, cellRenderer: this.colDef5}
  ];


  ngOnInit(): void {
    this.getAutoGeneratedBudgetNo();
    this.getuserplants();
    this.getAllInactivePaybackApprovalDocument();
    this.getAllInactiveApprovalDocument();
    this.Changetypedepartment();
    this.deleteApprovalDocument(null)
    this.role = this.cryptoService.decryptData(this.cookie.get(AppConstants.role));
    this.Contiguousgrp.patchValue({
      payback: false
    })
    console.log('deprtment', this.department)
  }

  Changetypedepartment(): void {
    if (this.department === 'Own Manufacturing') {
      this.typeofcapex = this.typeofone;
    } else {
      this.typeofcapex = this.typeoftwo;
    }
  }

  // document to upload payback
  paybackupload(): void {
    const uploadPopup = this.dialog.open(FileUploadComponent, {
      data: {docType: 'PBACK'}, // capex approval
      width: '900px'
    });
    uploadPopup.afterClosed().subscribe(result => {
      this.getAllInactivePaybackApprovalDocument();
    });
  }

  // document to upload
  upload(): void {
    const uploadPopup = this.dialog.open(FileUploadComponent, {
      data: {docType: 'CMNAP'}, // capex approval
      width: '900px'
    });
    uploadPopup.afterClosed().subscribe(result => {
      this.getAllInactiveApprovalDocument();
    });
  }

  getAllInactiveApprovalDocument(): void {
    const spinner = this.spinnerService.start();
    this.commonService.getAllInactiveApprovalDocument()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            console.log('inactive docs', response.data);
            this.rowData = response.data;
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  onKey(event: any): void {
    this.plants = this.filterdepartments;
    const keyword = event.target.value.toLowerCase();
    const datalist = this.plants.filter(data => data.plantName.toLowerCase().includes(keyword));
    this.plants = datalist;
    console.log(event.target.value);
    console.log(this.filterdepartments);
  }

  searchinvest(event: any): void {
    console.log(event.target.value);
    this.investments = this.filterinvest
    const keyword = event.target.value.toLowerCase();
    const datalist = this.investments.filter(data => data.investment_name.toLowerCase().includes(keyword));
    this.investments = datalist;
    console.log('filterinvest', this.filterinvest, 'keyword' + keyword);
  }

  searchBudgetIds(event: any): void {
    console.log(event.target.value);
    this.dataList = this.datalistfiltr
    const keyword = event.target.value.toLowerCase();
    const list = this.dataList.filter(data => data.Detail.toLowerCase().includes(keyword));
    this.dataList = list
  }

  getAllInactivePaybackApprovalDocument(): void {
    const spinner = this.spinnerService.start();
    this.commonService.getAllInactivePaybackApprovalDocument()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            console.log(response.data);
            this.payloadfile = response.data;
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  deleteApprovalDocument(docId: number | any): void {
    const spinner = this.spinnerService.start();
    this.commonService.deleteInactiveApprovalDocument(docId)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            this.getAllInactiveApprovalDocument();
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  deletePaybackInactiveApprovalDocument(docId: number): void {
    const spinner = this.spinnerService.start();
    this.commonService.deletePaybackInactiveApprovalDocument(docId)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            this.errorService.showSuccess(response.retMsg);
            this.getAllInactivePaybackApprovalDocument();
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  onGridCellClickedpayback(event: any):
    void {
    if (event.colDef.field === 'delete') {
      const docId = event.data.docId;
      this.deletePaybackInactiveApprovalDocument(docId);
    }
  }

  onGridCellClicked(event: any):
    void {
    if (event.colDef.field === 'delete') {
      const docId = event.data.docId;
      this.deleteApprovalDocument(docId);
    }
  }

  getAllApprovalDocument(): void {
    // tslint:disable-next-line:radix
    const approvalId = parseInt(this.approvalId);
    const spinner = this.spinnerService.start();
    this.commonService.getAllApprovalDocument(approvalId)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            console.log(response.data);
            this.rowData = response.data;
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  getAutoGeneratedBudgetNo(): void {
    const spinner = this.spinnerService.start();
    this.commonService.getAutoGeneratedBudgetNo()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
          } else {
            this.budgetcode.patchValue({
              budgetcd: response.budgetCd,
            });
            this.budgetCd = response.budgetCd;
            console.log(this.budgetCd);
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  typeselector(event: any): void {
    this.selectortype = event.value;
    console.log(event.value);
    this.budgetForm.reset()
    this.Contiguousgrp.reset()
    this.selectedList = []
    this.amountselect = []
    this.selectedidamount = []
    this.localsaved = []
    this.values = []
    this.dataList = []
    this.Contiguousgrp.patchValue({
      payback: false
    })
    if (this.selectortype === '2') {
      this.getAllUserPlants();
      this.getallinvestmenttypes();
    } else if (this.selectortype === '4') {
      this.getallinvestmenttypes()
    } else {
      this.getuserplants();
    }
  }


  userSelectedBudgetIds(plant: number, invest: any): void {
    console.log('userSelectedBudgetIds', plant, invest)
    const spinner = this.spinnerService.start();
    this.commonService.userSelectedBudgetIds(invest, plant)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
          } else {
            this.dataList = response.data;
            this.datalistfiltr = response.data;
            if (response.invstmntType.length != 0 && this.selectortype != '2') {
              this.investments = response.invstmntType
              this.filterinvest = response.invstmntType
              console.log('11111', this.filterinvest)
            }
            if (this.selectortype === '4') {
              this.getallinvestmenttypes()
            }
            console.log('data', response.data)
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );
  }

  onSelectionPlantANdAinvest(): void {
    const plant: number = this.budgetForm.value.plantSelect;
    let invest: any = this.budgetForm.value.investmentSelect;
    console.log('plnt invst', invest, plant)
    this.plantId = this.budgetForm.value.plantSelect;
    if (plant === null) {
      this.errorService.showError(0, 'Please select plant', 'Plant selection is mandatory')
    } else if (this.selectortype !== '4') {
      if (!this.randomselect) {
        this.userSelectedBudgetIds(plant, invest);
      } else {
        console.log('plnt invst22222', invest, plant)
        this.userSelectedBudgetIds(0, invest);
      }
      this.selectedList = [];
      this.amountselect = [];
      const requestIds: any [] = []
      this.budgetForm.patchValue({
        budgetSelect: requestIds
      })
    } else if (this.randomselect) {
      if (invest !== 8 && invest !== 9 && invest !== 10) {
        invest = '1,2,3,4,5,6,7'
        this.userSelectedBudgetIds(0, invest);
      } else {
        this.userSelectedBudgetIds(0, invest);
      }

    } else {
      if (invest !== 8 && invest !== 9 && invest !== 10) {
        invest = '1,2,3,4,5,6,7'
        this.userSelectedBudgetIds(plant, invest);
      } else {
        this.userSelectedBudgetIds(plant, invest);
      }
    }
  }


  getallinvestmenttypes(): void {
    this.commonService.getallinvestmenttypes()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          console.log('investments', response.data);
          this.investments = response.data;
          this.filterinvest = response.data
          console.log('222222', this.filterinvest)
        },
        (_: any) => {
          console.log('error');
        },
      );
  }

  getuserplants(): void {
    this.commonService.getuserplants()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          console.log('getuserplants', response.data);
          this.plants = response.data;
          this.filterdepartments = response.data;

        },
        (_: any) => {
          console.log('error');
        },
      );

  }

  getAllUserPlants(): void {
    this.commonService.getAllUserPlants()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          console.log('getuserplants', response.data);
          this.plants = response.data;
          this.filterdepartments = response.data;
        },
        (_: any) => {
          console.log('error');
        },
      );
  }


  findAbsentIds(requestIds: number[]): number[] {
    const resultArray: any[] = [];
    this.localsaved.forEach((elements: any, index: number, _) => {
      if (requestIds.indexOf(elements.requestId) === -1) {
        resultArray.push(elements.requestId);
      }
    });
    return resultArray;
  }


  onSelectBudget(): void {
    const requestIds: any[] = this.budgetForm.value.budgetSelect;
    const difference: number[] = this.findAbsentIds(requestIds);
    if (difference.length > 0) {
      requestIds.push(difference[0]);
      this.budgetForm.patchValue({
        budgetSelect: requestIds
      });
      this.errorService.showError(0, 'Invalid Action', 'This Budget id is already selected.' +
        'it can\'t be unselected. you can remove it from below.');
      return;
    } else if (this.selectortype === '1' && requestIds.length > 1) {
      this.budgetForm.patchValue({
        budgetSelect: this.stored
      });
      this.errorService.showError(0, 'Invalid Action', 'Selected Budget.' +
        'Only one Buudget can be select.');
      return;
    }
    this.stored = requestIds
    this.selectedList = [];
    const spinner = this.spinnerService.start();
    this.commonService.getDetailesOfSelectedRequests(requestIds)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
          } else {
            console.log('getDetailesOfSelectedRequests', response);
            const tempSelectedList: any[] = response.data;
            for (const amount of tempSelectedList) {
              this.availamountcheck = amount.amount
              amount.availAmount = amount.amount;
              amount.amount = 0;
              amount.investmentId = amount.investment_id;
              this.selectedidamount.forEach((elment: any, index, _) => {
                console.log('amount', amount, 'element', elment);
                if (elment.id === amount.requestId) {
                  amount.amount = elment.amount;
                }

              });
              this.selectedList.push(amount);
            }
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );

  }

  localsavebudget(amount: number, requestId: number, avail: number): void {
    this.summ += amount;
    console.log('amount', this.summ)
    this.budgetAmount = this.budgetForm.value.budgetAmount;
    let len = this.localsaved.length
    console.log(this.summ)
    if (this.selectortype == '1' && len > 0) {
      this.errorService.showError(0, 'Invalid Action!', ' One Budget can be selected for Budgeted Type!');
      this.summ -= amount;
    } else if (amount === 0) {
      this.errorService.showError(0, 'Invalid Action!', ' 0  cant be saved!');
    } else if (amount === null) {
      this.errorService.showError(0, 'Invalid Action!', ' Amount Cant be empty');
    } else if (this.budgetAmount == null) {
      this.errorService.showError(0, 'Invalid Action!', ' Please enter Capex Amount!');
    } else if (this.budgetAmount < 0) {
      this.errorService.showError(0, 'Invalid Action!', 'Less than 0 Capex amount is not Acceptable!');
    } else if (this.budgetAmount < this.summ) {
      this.errorService.showError(0, 'Invalid Action!', ' entered Budget amount cannot be greater than Capex Amount!');
      this.summ -= amount;
    } else if (avail < amount) {
      console.log(avail + '<' + this.summ);
      this.errorService.showError(0, 'Invalid Action!', ' entered Budget amount cannot be greater than Available Amount!');
      this.summ -= amount;
    } else if (this.selectortype == '1' && this.budgetAmount !== this.summ) {
      this.errorService.showError(0, 'Invalid Action!', ' Entered Amount should match with Capex amount!');
      this.summ -= amount;
    } else {
      this.localsaved.push({amount, requestId});
      this.selectedidamount.push({
        id: requestId, amount: amount
      });
      this.amountselect.push(amount);
      this.changeColor(requestId);
      this.sumOfBudgets(amount);
    }
  }

  localdeletebudget(requestId: number, amount: number): void {
    console.log('localdeletebudget', requestId);

    // @ts-ignore
    this.selectedList.find(item => item.requestId == requestId).amount = 0
    this.localsaved.forEach((elemnt, idx: number, _) => {
      if (elemnt.requestId === requestId) {
        this.summ -= elemnt.amount
        this.localsaved.find(item => item.requestId == requestId).amount = 0
        this.selectedidamount.find(item => item.id == requestId).amount = 0
        this.localsaved.splice(idx, 1);

      }
      console.log('summ', this.summ);
    });
    this.values.forEach((elment, idx: number, _) => {
      if (elment === requestId) {
        this.values.splice(idx, 1);
      }
    });
    this.selectedList.forEach((elemente, idx: number, _) => {
      if (elemente.requestId === requestId) {
        this.selectedList.splice(idx, 1);
      }
    });
    const requestIds: any[] = this.budgetForm.value.budgetSelect;
    const index = requestIds.indexOf(requestId);
    if (index !== -1) {
      requestIds.splice(index, 1);
      this.budgetForm.patchValue({
        budgetSelect: requestIds
      });
    }
    console.log('localdelete', this.localsaved);
    console.log('values', this.values);
  }


  saveBudgetAmount(amount: number, requestId: number, _: number): void {
    console.log(amount);
    const spinner = this.spinnerService.start();
    this.budgetAmount = this.budgetForm.value.budgetAmount;
    console.log('amountselect', this.amountselect);
    if (this.budgetAmount < this.summ
    ) {
      this.errorService.showError(0, 'Invalid Action!', 'entered Budget amount cannot be greater than Capex Amount. ');
      this.spinnerService.stop(spinner);
    } else {
      this.commonService.saveBudgetAmount(requestId, amount, this.approvalId)
        .pipe(takeUntil(this.ngUnsubscribe))
        .subscribe(
          (response) => {
            if (response.retVal !== 0) {
              this.errorService.showError(0, 'Failed', response.retMsg + '!');
            } else {
              this.amountselect.push(amount);
              console.log(this.amountselect);
              this.retMsg = '1';
            }
            this.spinnerService.stop(spinner);
          },
          (__: any) => {
            this.spinnerService.stop(spinner);
          },
        );
    }
  }


  isBudgetSaved(i: number):
    boolean {
    // check if index is present in values array
    return this.values.indexOf(i) !== -1;
  }


  submitallatonce(): void {
    this.budgetAmount = this.budgetForm.value.budgetAmount;
    this.budgetDesc = this.budgetForm.value.budgetDesc;
    this.payback = this.Contiguousgrp.value.payback;
    this.investment = this.budgetForm.value.investmentSelect
    if (this.budgetDesc === null) {
      this.errorService.showError(0, 'Description Cannot be empty', 'Please fill Description.');
    } else if (this.investment === null) {
      this.errorService.showError(0, 'Investment Cannot be empty', 'Please Select Investment.');
    } else if (this.selectortype === '0') {
      this.errorService.showError(0, 'Capex type not selected ', 'Please select a budget type.');
    } else if (this.payback && this.payloadfile.length === 0) {
      this.errorService.showError(0, 'Payback Document Missing ', 'Please upload payback document.');
    } else if (this.rowData.length === 0) {
      this.errorService.showError(0, ' Document Missing ', 'Please upload  document.');
    } else {
      console.log(this.selectortype);
      if (this.selectortype === '1') {
        if (this.localsaved.length === 0) {
          this.errorService.showError(0, 'Budget Id not Selected', 'Atleast one Budget Id should be Selected.');
        } else if (this.budgetAmount !== this.summ) {
          this.errorService.showError(0, ' Selected Budgeted', 'You have to meet the capex amount from the Budget Amounts.');
        } else {
          // this.dialog.open(this.approveWarning, {width: '600px'});
          console.log('worked 1');
          this.submitBudgetApproval();
        }
      } else if (this.selectortype === '2') {
        if (this.localsaved.length !== 0) {
          this.errorService.showError(0, 'Selected Non Budgeted', 'No Budget amounts need to be utilised.');
        } else {
          // this.dialog.open(this.approveWarning, {width: '600px'});
          this.contigious = true;
          this.submitBudgetApproval();
          console.log('worked 2');
        }
      } else if (this.selectortype === '3') {
        if (this.localsaved.length === 0) {
          this.errorService.showError(0, 'Selected Partial', 'Atleast one Request Id should be Selected');
        } else if (this.budgetAmount === this.summ) {
          this.errorService.showError(0, 'Selected Partial', 'You can change the Budget Type from \'Partial\' to \'Budgeted\' because Capex amount is matching with entered Budget Amount');
          this.unchecksaved();
        } else {
          // this.dialog.open(this.approveWarning, {width: '600px'});
          this.contigious = true;
          this.submitBudgetApproval();
          console.log('worked 3');
        }
      } else if (this.selectortype === '4') {
        if (this.localsaved.length === 0) {
          this.errorService.showError(0, 'Requests not Selected', 'Atleast one Request Id should be Selected.');
        } else if (this.budgetAmount !== this.summ) {
          this.errorService.showError(0, ' Selected Cross Utilisation', 'You have to meet the capex amount from the Budget Amounts.');
        } else {
          // this.dialog.open(this.approveWarning, {width: '600px'});
          this.submitBudgetApproval();
          console.log('worked 4');
        }
      }
    }
  }

  /**
   * To uncheck all saved budget ids*/
  unchecksaved() {
    this.values = []
    this.summ = 0
    this.localsaved = []
  }

  /**
   * to uncheck individual ids*/

  uncheckbudgetid(requestId: any) {
    this.values.forEach((elment, idx: number, _) => {
      if (elment === requestId) {
        this.values.splice(idx, 1);
      }
    });

    this.localsaved.forEach((elment, idx: number, _) => {
      if (elment.requestId === requestId) {
        this.summ -= elment.amount
        this.localsaved.splice(idx, 1);
      }
    });
    console.log(this.localsaved)
  }

  idDetaildWindow(data: any): void {
    console.log('clicked', data);
    this.RequestDetail = data;
    this.dialog.open(this.Details, {width: '600px'});
  }


  submitBudgetApproval(): void {
    const requestIds = this.budgetForm.value.budgetSelect;
    const spinner = this.spinnerService.start();
    const plant: number = this.budgetForm.value.plantSelect;
    const investmentid = this.budgetForm.value.investmentSelect
    console.log('submitted', investmentid)
    this.commonService.submitBudgetApproval(this.budgetCd, this.budgetDesc, this.budgetAmount, requestIds, this.contigious, this.localsaved, investmentid, plant)
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          if (response.retVal !== 0) {
            this.errorService.showError(0, 'Failed', response.retMsg + '!');
          } else {
            this.errorService.showSuccess(response.retMsg);
            this.dialog.closeAll();
            this.route.navigate(['/capex-approval']);
          }
          this.spinnerService.stop(spinner);
        },
        (_: any) => {
          this.spinnerService.stop(spinner);
        },
      );

  }

  sumOfBudgets(amount: number):
    void {
    this.sumOfBudget += amount;
  }

  deletenullapprovals(): void {
    this.commonService.deletenullapprovals().pipe(takeUntil(this.ngUnsubscribe))
      .subscribe((response) => {
        console.log(response.retMsg);
      });
  }

  contiguousCheck(contiguous: boolean): void {
    console.log('contiguous', contiguous);
    if (this.budgetAmount === this.summ
    ) {
      this.errorService.showError(0, 'Contiguous is not valid.!', 'Capex and Utilised budget amounts where equal').afterClosed().subscribe(
        (_) => {
          this.Contiguousgrp.setValue({Contiguous: false});
        }
      );

    } else {
      this.contigious = contiguous;
      console.log(this.contigious);
    }
  }


  changeColor(i: number): void {
    this.values.push(i);
    console.log('value', this.values);
    this.selectedIndex = i;

  }

  amountsimon() {
    if (this.selectortype == '1') {
      this.budgetAmount = this.budgetForm.value.budgetAmount;
      console.log('amount', this.budgetAmount)
      if (this.availamountcheck < this.budgetAmount) {
        this.errorService.showError(0, 'Invalid Action', 'Amount cant be greater than Budget amount')
      } else {
        this.check = this.budgetAmount
      }
      console.log(this.check)
    }

  }

  getAllPlantsApprovd() {
    this.commonService.getAllPlantsApprovd()
      .pipe(takeUntil(this.ngUnsubscribe))
      .subscribe(
        (response) => {
          console.log('getuserplants', response.data);
          this.plants = response.data;
          this.filterdepartments = response.data;

        },
        (_: any) => {
          console.log('error');
        },
      );
  }

  checker(event: any) {
    console.log(event);
    this.randomselect = event.checked;
    if (this.randomselect) {
      this.getAllPlantsApprovd();
      this.getallinvestmenttypes();
      this.budgetForm.reset();
    } else {
      this.budgetForm.reset();
      this.getuserplants();
    }
  }


}

interface BudgetId {
  requestId: number;
  budgetId: string;
  creationBy: string;
  investment: number;
  plant_id: number;
  Detail: any;


}

interface Select {
  requestId: number;
  budgetId: string;
  amount: number;
  availAmount: number;
  investmentId: number;
}
